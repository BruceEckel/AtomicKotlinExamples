configurations {
    kotlinRuntime
}

dependencies {
    kotlinRuntime "org.jetbrains.kotlin:kotlin-stdlib:1.3.50"
}

def kotlinClassPath = configurations.kotlinRuntime + sourceSets.main.runtimeClasspath

task ASCIIMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ASCIIMapKt'
}

task AVarIsMutable(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AVarIsMutableKt'
}

task AbsExercise1(type: JavaExec) {
    classpath kotlinClassPath
    main = 'abstractclasses.AbsExercise1Kt'
}

task AbsExercise2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'abstractclasses.AbsExercise2Kt'
}

task AbsExercise3(type: JavaExec) {
    classpath kotlinClassPath
    main = 'abstractclasses.AbsExercise3Kt'
}

task AddingIntToChar(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AddingIntToCharKt'
}

task AllOperators(type: JavaExec) {
    classpath kotlinClassPath
    main = 'operatoroverloading.AllOperatorsKt'
}

task Also(type: JavaExec) {
    classpath kotlinClassPath
    main = 'scopefunctions.AlsoKt'
}

task Amphibian(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AmphibianKt'
}

task AnUnchangingVar(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AnUnchangingVarKt'
}

task AnalyzeInput(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AnalyzeInputKt'
}

task Animals(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AnimalsKt'
}

task AnnotatedJava(type: JavaExec) {
    classpath kotlinClassPath
    main = 'nullabilityannotations.AnnotatedJavaKt'
}

task Any(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AnyKt'
}

task AnyFromListOfStar(type: JavaExec) {
    classpath kotlinClassPath
    main = 'extensionproperties.AnyFromListOfStarKt'
}

task AnyInstead(type: JavaExec) {
    classpath kotlinClassPath
    main = 'introgenerics.AnyInsteadKt'
}

task ApplyIfNotNull(type: JavaExec) {
    classpath kotlinClassPath
    main = 'scopefunctions.ApplyIfNotNullKt'
}

task ApplyVsAlso(type: JavaExec) {
    classpath kotlinClassPath
    main = 'scopefunctions.ApplyVsAlsoKt'
}

task Arg(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ArgKt'
}

task ArgumentOrder(type: JavaExec) {
    classpath kotlinClassPath
    main = 'color1.ArgumentOrderKt'
}

task ArraySpread(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ArraySpreadKt'
}

task AssigningAnIf(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AssigningAnIfKt'
}

task AssigningToVariable(type: JavaExec) {
    classpath kotlinClassPath
    main = 'upcasting.AssigningToVariableKt'
}

task AssignmentOperators(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AssignmentOperatorsKt'
}

task AssociateBy(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AssociateByKt'
}

task AssociateByUnique(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AssociateByUniqueKt'
}

task AssociateWith(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AssociateWithKt'
}

task AtomicTestCapture(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AtomicTestCaptureKt'
}

task AverageIncome(type: JavaExec) {
    classpath kotlinClassPath
    main = 'firstversion.AverageIncomeKt'
}

task AverageIncomeWithException(type: JavaExec) {
    classpath kotlinClassPath
    main = 'properexception.AverageIncomeWithExceptionKt'
}

task AverageIncomeWithNull(type: JavaExec) {
    classpath kotlinClassPath
    main = 'withnull.AverageIncomeWithNullKt'
}

task BCIExercise1(type: JavaExec) {
    classpath kotlinClassPath
    main = 'baseclassinit.BCIExercise1Kt'
}

task BCIExercise2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'baseclassinit.BCIExercise2Kt'
}

task BCIExercise3(type: JavaExec) {
    classpath kotlinClassPath
    main = 'baseclassinit.BCIExercise3Kt'
}

task BMIEnglish(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BMIEnglishKt'
}

task BMIMetric(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BMIMetricKt'
}

task Backticks(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BackticksKt'
}

task Basic(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BasicKt'
}

task BasicFunctions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BasicFunctionsKt'
}

task BasicGenerics(type: JavaExec) {
    classpath kotlinClassPath
    main = 'generics.BasicGenericsKt'
}

task BasicLambda(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BasicLambdaKt'
}

task BasicLogging(type: JavaExec) {
    classpath kotlinClassPath
    main = 'logging.BasicLoggingKt'
}

task Bear(type: JavaExec) {
    classpath kotlinClassPath
    main = 'complexconstructors.BearKt'
}

task BetterSuitcase(type: JavaExec) {
    classpath kotlinClassPath
    main = 'lateinitialization.BetterSuitcaseKt'
}

task BigFibonacci(type: JavaExec) {
    classpath kotlinClassPath
    main = 'adaptingjava.BigFibonacciKt'
}

task BiggestLong(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BiggestLongKt'
}

task BmiWhen(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BmiWhenKt'
}

task BookExtensions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BookExtensionsKt'
}

task Booleans(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BooleansKt'
}

task Boxes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BoxesKt'
}

task BuildString(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BuildStringKt'
}

task BuildStringAndThis(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BuildStringAndThisKt'
}

task ByOperations(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ByOperationsKt'
}

task CallStack(type: JavaExec) {
    classpath kotlinClassPath
    main = 'recursion.CallStackKt'
}

task CallTopLevelFunction(type: JavaExec) {
    classpath kotlinClassPath
    main = 'fromjava.CallTopLevelFunction'
}

task CallTopLevelFunction2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'fromjava.CallTopLevelFunction2'
}

task CarHolder(type: JavaExec) {
    classpath kotlinClassPath
    main = 'generics.CarHolderKt'
}

task Cat(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CatKt'
}

task CatchChecked(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CatchChecked'
}

task ChainedCalls(type: JavaExec) {
    classpath kotlinClassPath
    main = 'safecalls.ChainedCallsKt'
}

task ChangingAVal(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ChangingAValKt'
}

task CharRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CharRangeKt'
}

task CheckObject(type: JavaExec) {
    classpath kotlinClassPath
    main = 'nothingtype.CheckObjectKt'
}

task CheckObject2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'nothingtype.CheckObject2Kt'
}

task CheckType(type: JavaExec) {
    classpath kotlinClassPath
    main = 'downcasting.CheckTypeKt'
}

task CheckingArgument(type: JavaExec) {
    classpath kotlinClassPath
    main = 'scopefunctions.CheckingArgumentKt'
}

task CheckingOptions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CheckingOptionsKt'
}

task ClassBodies(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ClassBodiesKt'
}

task Closeable(type: JavaExec) {
    classpath kotlinClassPath
    main = 'resourcecleanup.CloseableKt'
}

task Closed(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ClosedKt'
}

task Closures(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ClosuresKt'
}

task Closures2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'Closures2Kt'
}

task Color2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'color2.Color2Kt'
}

task Color3(type: JavaExec) {
    classpath kotlinClassPath
    main = 'color3.Color3Kt'
}

task ColorBlend(type: JavaExec) {
    classpath kotlinClassPath
    main = 'colorblend.ColorBlendKt'
}

task ColorSet(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ColorSetKt'
}

task CompanionFactory(type: JavaExec) {
    classpath kotlinClassPath
    main = 'companionobjects.CompanionFactoryKt'
}

task CompanionObject(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CompanionObjectKt'
}

task CompareTo(type: JavaExec) {
    classpath kotlinClassPath
    main = 'usingoperators.CompareToKt'
}

task Computation(type: JavaExec) {
    classpath kotlinClassPath
    main = 'destructuring.ComputationKt'
}

task Computer(type: JavaExec) {
    classpath kotlinClassPath
    main = 'interfaces.ComputerKt'
}

task Confusing(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ConfusingKt'
}

task ConstructorReference(type: JavaExec) {
    classpath kotlinClassPath
    main = 'memberreferences3.ConstructorReferenceKt'
}

task ContactMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ContactMapKt'
}

task Conversion(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ConversionKt'
}

task Cookie(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CookieKt'
}

task CopyDataClass(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CopyDataClassKt'
}

task Counter(type: JavaExec) {
    classpath kotlinClassPath
    main = 'propertyaccessors.CounterKt'
}

task CreateString(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CreateStringKt'
}

task CreateString2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CreateString2Kt'
}

task CreatingLists(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CreatingListsKt'
}

task Cup(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CupKt'
}

task Cup2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'Cup2Kt'
}

task CustomLabel(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CustomLabelKt'
}

task Data(type: JavaExec) {
    classpath kotlinClassPath
    main = 'propertyaccessors.DataKt'
}

task DataClassCopy(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DataClassCopyKt'
}

task DataClasses(type: JavaExec) {
    classpath kotlinClassPath
    main = 'dataclasses.DataClassesKt'
}

task Declarations(type: JavaExec) {
    classpath kotlinClassPath
    main = 'lambdawithreceiver.DeclarationsKt'
}

task Default(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DefaultKt'
}

task DefineTakeIf(type: JavaExec) {
    classpath kotlinClassPath
    main = 'definetakeif.DefineTakeIfKt'
}

task DefiningExceptions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'exceptionhandling.DefiningExceptionsKt'
}

task DefiningRanges(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DefiningRangesKt'
}

task Definition(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DefinitionKt'
}

task DelegatedControls(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DelegatedControlsKt'
}

task Dereference(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DereferenceKt'
}

task DereferenceNull(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DereferenceNullKt'
}

task DestructuringData(type: JavaExec) {
    classpath kotlinClassPath
    main = 'usingoperators.DestructuringDataKt'
}

task DestructuringDuo(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DestructuringDuoKt'
}

task DestructuringMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'usingoperators.DestructuringMapKt'
}

task Direction(type: JavaExec) {
    classpath kotlinClassPath
    main = 'enumerations.DirectionKt'
}

task DisplayAlienSpecies(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DisplayAlienSpeciesKt'
}

task DoWhile(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DoWhileKt'
}

task DoWhileControl(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DoWhileControlKt'
}

task DoWhileLoop(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DoWhileLoopKt'
}

task Dog(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DogKt'
}

task Drinks(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DrinksKt'
}

task EagerEvaluation(type: JavaExec) {
    classpath kotlinClassPath
    main = 'EagerEvaluationKt'
}

task EagerVsLazyEvaluation(type: JavaExec) {
    classpath kotlinClassPath
    main = 'creatingsequences.EagerVsLazyEvaluationKt'
}

task EasyKeys(type: JavaExec) {
    classpath kotlinClassPath
    main = 'hashing.EasyKeysKt'
}

task ElvisCall(type: JavaExec) {
    classpath kotlinClassPath
    main = 'elvisoperator.ElvisCallKt'
}

task ElvisOperator(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ElvisOperatorKt'
}

task EmptyProgram(type: JavaExec) {
    classpath kotlinClassPath
    main = 'EmptyProgramKt'
}

task EnumImport(type: JavaExec) {
    classpath kotlinClassPath
    main = 'EnumImportKt'
}

task Evaluation(type: JavaExec) {
    classpath kotlinClassPath
    main = 'EvaluationKt'
}

task EvaluationOrder(type: JavaExec) {
    classpath kotlinClassPath
    main = 'EvaluationOrderKt'
}

task Exercise1(type: JavaExec) {
    classpath kotlinClassPath
    main = 'complexconstructors.Exercise1Kt'
}

task Exercise2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'complexconstructors.Exercise2Kt'
}

task Exercise3(type: JavaExec) {
    classpath kotlinClassPath
    main = 'complexconstructors.Exercise3Kt'
}

task ExplicitCheck(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ExplicitCheckKt'
}

task ExplicitDelegation(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ExplicitDelegationKt'
}

task ExplicitTyping(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ExplicitTypingKt'
}

task ExploreMaze(type: JavaExec) {
    classpath kotlinClassPath
    main = 'robotexplorer1.ExploreMazeKt'
}

task ExploreMaze2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'robotexplorer2.ExploreMaze2Kt'
}

task ExpressionInTemplate(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ExpressionInTemplateKt'
}

task ExtensionsToJavaClass(type: JavaExec) {
    classpath kotlinClassPath
    main = 'fromkotlin.ExtensionsToJavaClassKt'
}

task Factorial(type: JavaExec) {
    classpath kotlinClassPath
    main = 'recursion.FactorialKt'
}

task Fail(type: JavaExec) {
    classpath kotlinClassPath
    main = 'nothingtype.FailKt'
}

task FaultySuitcase(type: JavaExec) {
    classpath kotlinClassPath
    main = 'lateinitialization.FaultySuitcaseKt'
}

task Fibonacci(type: JavaExec) {
    classpath kotlinClassPath
    main = 'recursion.FibonacciKt'
}

task FibonacciProperty(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FibonacciPropertyKt'
}

task Filter(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FilterKt'
}

task FilterEven(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FilterEvenKt'
}

task FilterIsInstance(type: JavaExec) {
    classpath kotlinClassPath
    main = 'downcasting.FilterIsInstanceKt'
}

task FilterMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FilterMapKt'
}

task FilterNotNull(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FilterNotNullKt'
}

task Flatten(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FlattenKt'
}

task FlattenAndFlatMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FlattenAndFlatMapKt'
}

task FloatingPointRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FloatingPointRangeKt'
}

task FoldAndReduce(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FoldAndReduceKt'
}

task FoldRight(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FoldRightKt'
}

task FoldVsForLoop(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FoldVsForLoopKt'
}

task ForControl(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ForControlKt'
}

task ForEachLine(type: JavaExec) {
    classpath kotlinClassPath
    main = 'resourcecleanup.ForEachLineKt'
}

task ForIsAStatement(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ForIsAStatementKt'
}

task ForLabeled(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ForLabeledKt'
}

task ForLoop(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ForLoopKt'
}

task ForWithCharRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ForWithCharRangeKt'
}

task ForWithRanges(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ForWithRangesKt'
}

task FullyQualify(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FullyQualifyKt'
}

task FunctionClosure(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FunctionClosureKt'
}

task FunctionReference(type: JavaExec) {
    classpath kotlinClassPath
    main = 'memberreferences2.FunctionReferenceKt'
}

task GadgetExtensions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'inheritanceandextensions2.GadgetExtensionsKt'
}

task GadgetMembers(type: JavaExec) {
    classpath kotlinClassPath
    main = 'inheritanceandextensions1.GadgetMembersKt'
}

task Game(type: JavaExec) {
    classpath kotlinClassPath
    main = 'downcasting.GameKt'
}

task GameImpl(type: JavaExec) {
    classpath kotlinClassPath
    main = 'polymorphism.GameImplKt'
}

task GardenItem(type: JavaExec) {
    classpath kotlinClassPath
    main = 'secondaryconstructors.GardenItemKt'
}

task GenericFunction(type: JavaExec) {
    classpath kotlinClassPath
    main = 'introgenerics.GenericFunctionKt'
}

task GenericHolder(type: JavaExec) {
    classpath kotlinClassPath
    main = 'introgenerics.GenericHolderKt'
}

task GenericListExt(type: JavaExec) {
    classpath kotlinClassPath
    main = 'extensionproperties.GenericListExtKt'
}

task GenericListExtensions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'introgenerics.GenericListExtensionsKt'
}

task GenericSpeakers(type: JavaExec) {
    classpath kotlinClassPath
    main = 'generics.GenericSpeakersKt'
}

task GermanOrdinals(type: JavaExec) {
    classpath kotlinClassPath
    main = 'GermanOrdinalsKt'
}

task GetOrPut(type: JavaExec) {
    classpath kotlinClassPath
    main = 'GetOrPutKt'
}

task GetTrace(type: JavaExec) {
    classpath kotlinClassPath
    main = 'checkinstructions.GetTraceKt'
}

task GetValue(type: JavaExec) {
    classpath kotlinClassPath
    main = 'GetValueKt'
}

task GetterAndSetter(type: JavaExec) {
    classpath kotlinClassPath
    main = 'summary2.GetterAndSetterKt'
}

task GreatApe(type: JavaExec) {
    classpath kotlinClassPath
    main = 'inheritance.ape1.GreatApeKt'
}

task GreatApe2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'inheritance.ape2.GreatApe2Kt'
}

task GreatApe3(type: JavaExec) {
    classpath kotlinClassPath
    main = 'baseclassinit.GreatApe3Kt'
}

task GreaterThan2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'GreaterThan2Kt'
}

task GroupBy(type: JavaExec) {
    classpath kotlinClassPath
    main = 'GroupByKt'
}

task GroupByVsFilter(type: JavaExec) {
    classpath kotlinClassPath
    main = 'GroupByVsFilterKt'
}

task GuaranteedCleanup(type: JavaExec) {
    classpath kotlinClassPath
    main = 'GuaranteedCleanupKt'
}

task Hamster(type: JavaExec) {
    classpath kotlinClassPath
    main = 'HamsterKt'
}

task Hamsters(type: JavaExec) {
    classpath kotlinClassPath
    main = 'propertyaccessors.HamstersKt'
}

task Handlers(type: JavaExec) {
    classpath kotlinClassPath
    main = 'exceptionhandling.HandlersKt'
}

task HasChar(type: JavaExec) {
    classpath kotlinClassPath
    main = 'HasCharKt'
}

task HashCodeFailure(type: JavaExec) {
    classpath kotlinClassPath
    main = 'HashCodeFailureKt'
}

task Hello(type: JavaExec) {
    classpath kotlinClassPath
    main = 'HelloKt'
}

task HelloWorld(type: JavaExec) {
    classpath kotlinClassPath
    main = 'HelloWorldKt'
}

task HelperFunction(type: JavaExec) {
    classpath kotlinClassPath
    main = 'localfunctions.HelperFunctionKt'
}

task HiddenArrayList(type: JavaExec) {
    classpath kotlinClassPath
    main = 'HiddenArrayListKt'
}

task Hierarchy(type: JavaExec) {
    classpath kotlinClassPath
    main = 'exceptionhandling.HierarchyKt'
}

task Holder(type: JavaExec) {
    classpath kotlinClassPath
    main = 'generics.HolderKt'
}

task House(type: JavaExec) {
    classpath kotlinClassPath
    main = 'baseclassinit.HouseKt'
}

task HumanAlice(type: JavaExec) {
    classpath kotlinClassPath
    main = 'downcasting.HumanAliceKt'
}

task If1(type: JavaExec) {
    classpath kotlinClassPath
    main = 'If1Kt'
}

task If2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'If2Kt'
}

task If3(type: JavaExec) {
    classpath kotlinClassPath
    main = 'If3Kt'
}

task If4(type: JavaExec) {
    classpath kotlinClassPath
    main = 'If4Kt'
}

task If5(type: JavaExec) {
    classpath kotlinClassPath
    main = 'If5Kt'
}

task If6(type: JavaExec) {
    classpath kotlinClassPath
    main = 'If6Kt'
}

task IfExpression(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IfExpressionKt'
}

task IfResult(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IfResultKt'
}

task Implementations(type: JavaExec) {
    classpath kotlinClassPath
    main = 'abstractclasses.ImplementationsKt'
}

task ImportClass(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ImportClassKt'
}

task ImportEverything(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ImportEverythingKt'
}

task ImportNameChange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ImportNameChangeKt'
}

task ImportPythagorean(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ImportPythagoreanKt'
}

task Improved(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ImprovedKt'
}

task InString(type: JavaExec) {
    classpath kotlinClassPath
    main = 'InStringKt'
}

task IncrementOperator(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IncrementOperatorKt'
}

task IndexIntoString(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IndexIntoStringKt'
}

task InferInt(type: JavaExec) {
    classpath kotlinClassPath
    main = 'InferIntKt'
}

task Inference(type: JavaExec) {
    classpath kotlinClassPath
    main = 'InferenceKt'
}

task InfiniteRecursion(type: JavaExec) {
    classpath kotlinClassPath
    main = 'recursion.InfiniteRecursionKt'
}

task InitSection(type: JavaExec) {
    classpath kotlinClassPath
    main = 'complexconstructors.InitSectionKt'
}

task InputLines1(type: JavaExec) {
    classpath kotlinClassPath
    main = 'InputLines1Kt'
}

task InputLines2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'InputLines2Kt'
}

task IntDivisionTruncates(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IntDivisionTruncatesKt'
}

task IntRanges(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IntRangesKt'
}

task IntegerOverflow(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IntegerOverflowKt'
}

task InterestingSessions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'localfunctions.InterestingSessionsKt'
}

task InterfaceCollision(type: JavaExec) {
    classpath kotlinClassPath
    main = 'collision.InterfaceCollisionKt'
}

task IntroducingCapture(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IntroducingCaptureKt'
}

task IntroducingNull(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IntroducingNullKt'
}

task Invoke(type: JavaExec) {
    classpath kotlinClassPath
    main = 'InvokeKt'
}

task IterateOverString(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IterateOverStringKt'
}

task Iteration(type: JavaExec) {
    classpath kotlinClassPath
    main = 'iteration.IterationKt'
}

task IterationVsMembership(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IterationVsMembershipKt'
}

task JavaChecked(type: JavaExec) {
    classpath kotlinClassPath
    main = 'JavaChecked'
}

task JavaList(type: JavaExec) {
    classpath kotlinClassPath
    main = 'JavaListKt'
}

task JetPack(type: JavaExec) {
    classpath kotlinClassPath
    main = 'JetPackKt'
}

task JoinToString(type: JavaExec) {
    classpath kotlinClassPath
    main = 'JoinToStringKt'
}

task KeyFailure(type: JavaExec) {
    classpath kotlinClassPath
    main = 'KeyFailureKt'
}

task KotlinChecked(type: JavaExec) {
    classpath kotlinClassPath
    main = 'KotlinCheckedKt'
}

task LabeledReturn(type: JavaExec) {
    classpath kotlinClassPath
    main = 'LabeledReturnKt'
}

task LabeledThis(type: JavaExec) {
    classpath kotlinClassPath
    main = 'labeledthis.LabeledThisKt'
}

task LambdaAndNamedArgs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'LambdaAndNamedArgsKt'
}

task LambdaIt(type: JavaExec) {
    classpath kotlinClassPath
    main = 'LambdaItKt'
}

task LambdaTypeInference(type: JavaExec) {
    classpath kotlinClassPath
    main = 'LambdaTypeInferenceKt'
}

task LazyInt(type: JavaExec) {
    classpath kotlinClassPath
    main = 'LazyIntKt'
}

task LazySyntax(type: JavaExec) {
    classpath kotlinClassPath
    main = 'lazyinitialization.LazySyntaxKt'
}

task Let(type: JavaExec) {
    classpath kotlinClassPath
    main = 'scopefunctions.LetKt'
}

task Level(type: JavaExec) {
    classpath kotlinClassPath
    main = 'enumerations.LevelKt'
}

task LibraryException(type: JavaExec) {
    classpath kotlinClassPath
    main = 'exceptionhandling.LibraryExceptionKt'
}

task ListCollection(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ListCollectionKt'
}

task ListIndicesMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ListIndicesMapKt'
}

task ListInit(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ListInitKt'
}

task ListOf(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ListOfKt'
}

task ListOfStar(type: JavaExec) {
    classpath kotlinClassPath
    main = 'extensionproperties.ListOfStarKt'
}

task ListOfStrings(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ListOfStringsKt'
}

task ListUsefulFunction(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ListUsefulFunctionKt'
}

task Lists(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ListsKt'
}

task LocalExtensions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'LocalExtensionsKt'
}

task LocalFile(type: JavaExec) {
    classpath kotlinClassPath
    main = 'checkinstructions.LocalFileKt'
}

task LocalFunctionReference(type: JavaExec) {
    classpath kotlinClassPath
    main = 'localfunctions.LocalFunctionReferenceKt'
}

task LocalFunctions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'LocalFunctionsKt'
}

task LogChanges(type: JavaExec) {
    classpath kotlinClassPath
    main = 'LogChangesKt'
}

task LongConstants(type: JavaExec) {
    classpath kotlinClassPath
    main = 'LongConstantsKt'
}

task MainArgConversion(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MainArgConversionKt'
}

task MainArgs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MainArgsKt'
}

task MakeSalad(type: JavaExec) {
    classpath kotlinClassPath
    main = 'fromjava.MakeSalad'
}

task Mapping(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MappingKt'
}

task Maps(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MapsKt'
}

task MatchingAgainstVals(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MatchingAgainstValsKt'
}

task MemberOperator(type: JavaExec) {
    classpath kotlinClassPath
    main = 'operatoroverloading.MemberOperatorKt'
}

task MemberVsExtension(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MemberVsExtensionKt'
}

task Membership(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MembershipKt'
}

task MembershipInRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MembershipInRangeKt'
}

task MembershipUsingBounds(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MembershipUsingBoundsKt'
}

task MixColors(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MixColorsKt'
}

task ModelingMI(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ModelingMIKt'
}

task Module2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'module2.Module2Kt'
}

task Modulus(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ModulusKt'
}

task Molecule(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MoleculeKt'
}

task MultipleArgs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MultipleArgsKt'
}

task MultipleListReferences(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MultipleListReferencesKt'
}

task MultipleListRefs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MultipleListRefsKt'
}

task MultipleRef(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MultipleRefKt'
}

task MultiplyByFour(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MultiplyByFourKt'
}

task MultiplyByThree(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MultiplyByThreeKt'
}

task MultiplyByTwo(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MultiplyByTwoKt'
}

task MutListIsList(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MutListIsListKt'
}

task MutableBlendMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'mutableblendmap.MutableBlendMapKt'
}

task MutableBlendMap2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'mutableblendmap2.MutableBlendMap2Kt'
}

task MutableList(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MutableListKt'
}

task MutableMaps(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MutableMapsKt'
}

task MutableMaze(type: JavaExec) {
    classpath kotlinClassPath
    main = 'designingwithinheritance.MutableMazeKt'
}

task MutableSet(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MutableSetKt'
}

task NPEOnPlatformType(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NPEOnPlatformTypeKt'
}

task NamedArguments(type: JavaExec) {
    classpath kotlinClassPath
    main = 'color1.NamedArgumentsKt'
}

task NamedCompanionObject(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NamedCompanionObjectKt'
}

task NewAngle(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NewAngleKt'
}

task NewException(type: JavaExec) {
    classpath kotlinClassPath
    main = 'exceptionhandling.NewExceptionKt'
}

task NickName(type: JavaExec) {
    classpath kotlinClassPath
    main = 'propertydelegation.NickNameKt'
}

task NoComputationYet(type: JavaExec) {
    classpath kotlinClassPath
    main = 'creatingsequences.NoComputationYetKt'
}

task NonNullAssert(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NonNullAssertKt'
}

task NonNullAssertCall(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NonNullAssertCallKt'
}

task NullInMaps(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NullInMapsKt'
}

task NullableFunction(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NullableFunctionKt'
}

task NullableInMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NullableInMapKt'
}

task NullableParameter(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NullableParameterKt'
}

task NullableReceiver(type: JavaExec) {
    classpath kotlinClassPath
    main = 'scopefunctions.NullableReceiverKt'
}

task NullableReturn(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NullableReturnKt'
}

task NullableTypes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NullableTypesKt'
}

task Num(type: JavaExec) {
    classpath kotlinClassPath
    main = 'operatoroverloading.NumKt'
}

task NumberConversions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NumberConversionsKt'
}

task NumberSequence1(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NumberSequence1Kt'
}

task NumberSequence2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NumberSequence2Kt'
}

task NumberTypes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NumberTypesKt'
}

task ObjectCounter(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ObjectCounterKt'
}

task ObjectFunctions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ObjectFunctionsKt'
}

task ObjectInheritance(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ObjectInheritanceKt'
}

task ObjectKeyword(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ObjectKeywordKt'
}

task ObjectNesting(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ObjectNestingKt'
}

task ObjectProperty(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ObjectPropertyKt'
}

task ObserveAnimals(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ObserveAnimalsKt'
}

task OmittingParentheses(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OmittingParenthesesKt'
}

task OneOrTheOther(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OneOrTheOtherKt'
}

task OpOrder(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OpOrderKt'
}

task OpOrderParens(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OpOrderParensKt'
}

task Open1(type: JavaExec) {
    classpath kotlinClassPath
    main = 'Open1Kt'
}

task Open2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'Open2Kt'
}

task OperationsOnSets(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OperationsOnSetsKt'
}

task OperatorPlus(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OperatorPlusKt'
}

task OtherConstructors(type: JavaExec) {
    classpath kotlinClassPath
    main = 'baseclassinit.OtherConstructorsKt'
}

task OutOfBounds(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OutOfBoundsKt'
}

task Overflow(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OverflowKt'
}

task OverloadedVsDefaultArg(type: JavaExec) {
    classpath kotlinClassPath
    main = 'overloadingvsdefaultargs.OverloadedVsDefaultArgKt'
}

task Overloading(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OverloadingKt'
}

task OverloadingAdd(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OverloadingAddKt'
}

task PairDestructuring(type: JavaExec) {
    classpath kotlinClassPath
    main = 'destructuring.PairDestructuringKt'
}

task PairOfLists(type: JavaExec) {
    classpath kotlinClassPath
    main = 'PairOfListsKt'
}

task Pairs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'destructuring.PairsKt'
}

task ParameterizedReturn(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ParameterizedReturnKt'
}

task ParameterizedTypes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ParameterizedTypesKt'
}

task Partition(type: JavaExec) {
    classpath kotlinClassPath
    main = 'PartitionKt'
}

task Perform(type: JavaExec) {
    classpath kotlinClassPath
    main = 'generics.PerformKt'
}

task Pet(type: JavaExec) {
    classpath kotlinClassPath
    main = 'dynamicbinding.PetKt'
}

task Pets(type: JavaExec) {
    classpath kotlinClassPath
    main = 'hashing.PetsKt'
}

task PlatformTypes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'PlatformTypesKt'
}

task Playing(type: JavaExec) {
    classpath kotlinClassPath
    main = 'upcasting.PlayingKt'
}

task PolymorphicRobot(type: JavaExec) {
    classpath kotlinClassPath
    main = 'polymorphism.polymorphicrobot.PolymorphicRobotKt'
}

task Postconditions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'checkinstructions.PostconditionsKt'
}

task PostfixVsPrefix(type: JavaExec) {
    classpath kotlinClassPath
    main = 'PostfixVsPrefixKt'
}

task Predicates(type: JavaExec) {
    classpath kotlinClassPath
    main = 'PredicatesKt'
}

task PropertyOptions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'lazyinitialization.PropertyOptionsKt'
}

task PropertyReadWrite(type: JavaExec) {
    classpath kotlinClassPath
    main = 'summary2.PropertyReadWriteKt'
}

task PropertyReference(type: JavaExec) {
    classpath kotlinClassPath
    main = 'memberreferences1.PropertyReferenceKt'
}

task Quadratic(type: JavaExec) {
    classpath kotlinClassPath
    main = 'QuadraticKt'
}

task QuadraticRequire(type: JavaExec) {
    classpath kotlinClassPath
    main = 'checkinstructions.QuadraticRequireKt'
}

task Quote(type: JavaExec) {
    classpath kotlinClassPath
    main = 'other.QuoteKt'
}

task Quoting(type: JavaExec) {
    classpath kotlinClassPath
    main = 'quoting.QuotingKt'
}

task Random(type: JavaExec) {
    classpath kotlinClassPath
    main = 'RandomKt'
}

task RangeOfInt(type: JavaExec) {
    classpath kotlinClassPath
    main = 'RangeOfIntKt'
}

task RangeSum(type: JavaExec) {
    classpath kotlinClassPath
    main = 'RangeSumKt'
}

task ReadOnlyAndPlus(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ReadOnlyAndPlusKt'
}

task ReadOnlyBlendMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'readonlyblendmap.ReadOnlyBlendMapKt'
}

task ReadOnlyBlendMap2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'readonlyblendmap2.ReadOnlyBlendMap2Kt'
}

task ReadOnlyBlendMap3(type: JavaExec) {
    classpath kotlinClassPath
    main = 'readonlyblendmap3.ReadOnlyBlendMap3Kt'
}

task ReadOnlyCollections(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ReadOnlyCollectionsKt'
}

task ReadOnlyMaps(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ReadOnlyMapsKt'
}

task ReadingName(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ReadingNameKt'
}

task ReadingNameWithIf(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ReadingNameWithIfKt'
}

task ReadonlyVsMutableList(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ReadonlyVsMutableListKt'
}

task RecursionLimits(type: JavaExec) {
    classpath kotlinClassPath
    main = 'recursion.RecursionLimitsKt'
}

task RecursiveEnumImport(type: JavaExec) {
    classpath kotlinClassPath
    main = 'enumerations.RecursiveEnumImportKt'
}

task References(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ReferencesKt'
}

task RegularClasses(type: JavaExec) {
    classpath kotlinClassPath
    main = 'withoutsealedclasses.RegularClassesKt'
}

task RegularLambda(type: JavaExec) {
    classpath kotlinClassPath
    main = 'regularlambda.RegularLambdaKt'
}

task RemoveDuplicates(type: JavaExec) {
    classpath kotlinClassPath
    main = 'RemoveDuplicatesKt'
}

task Repeat(type: JavaExec) {
    classpath kotlinClassPath
    main = 'RepeatKt'
}

task RepeatByInt(type: JavaExec) {
    classpath kotlinClassPath
    main = 'RepeatByIntKt'
}

task RepeatFun(type: JavaExec) {
    classpath kotlinClassPath
    main = 'definingrepeat.RepeatFunKt'
}

task RepeatThreeTimes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'RepeatThreeTimesKt'
}

task RepeatVerbose(type: JavaExec) {
    classpath kotlinClassPath
    main = 'RepeatVerboseKt'
}

task Repetitive(type: JavaExec) {
    classpath kotlinClassPath
    main = 'withfunction.RepetitiveKt'
}

task RequireNotNull(type: JavaExec) {
    classpath kotlinClassPath
    main = 'checkinstructions.RequireNotNullKt'
}

task ResultOfApply(type: JavaExec) {
    classpath kotlinClassPath
    main = 'scopefunctions.ResultOfApplyKt'
}

task ResultOfWith(type: JavaExec) {
    classpath kotlinClassPath
    main = 'scopefunctions.ResultOfWithKt'
}

task ReturnFromFun(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ReturnFromFunKt'
}

task ReturnInsideLambda(type: JavaExec) {
    classpath kotlinClassPath
    main = 'localfunctions.ReturnInsideLambdaKt'
}

task RigidHolder(type: JavaExec) {
    classpath kotlinClassPath
    main = 'introgenerics.RigidHolderKt'
}

task Safe(type: JavaExec) {
    classpath kotlinClassPath
    main = 'downcasting.SafeKt'
}

task SafeCall(type: JavaExec) {
    classpath kotlinClassPath
    main = 'safecalls.SafeCallKt'
}

task SafeOperation(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SafeOperationKt'
}

task SayHello(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SayHelloKt'
}

task Scientist(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ScientistKt'
}

task SealedClasses(type: JavaExec) {
    classpath kotlinClassPath
    main = 'sealedclasses.SealedClassesKt'
}

task Sets(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SetsKt'
}

task SimilarOperation(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SimilarOperationKt'
}

task Simple(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SimpleKt'
}

task SimpleConstructor(type: JavaExec) {
    classpath kotlinClassPath
    main = 'complexconstructors.SimpleConstructorKt'
}

task SimpleHashing(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SimpleHashingKt'
}

task SimpleLoggingStrategy(type: JavaExec) {
    classpath kotlinClassPath
    main = 'logging.SimpleLoggingStrategyKt'
}

task SimpleOperation(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SimpleOperationKt'
}

task SingleArgRequire(type: JavaExec) {
    classpath kotlinClassPath
    main = 'checkinstructions.SingleArgRequireKt'
}

task SmartCast(type: JavaExec) {
    classpath kotlinClassPath
    main = 'downcasting.SmartCastKt'
}

task SortWith(type: JavaExec) {
    classpath kotlinClassPath
    main = 'memberreferences1.SortWithKt'
}

task Speakers(type: JavaExec) {
    classpath kotlinClassPath
    main = 'generics.SpeakersKt'
}

task SpreadOperator(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SpreadOperatorKt'
}

task StateOfAClass(type: JavaExec) {
    classpath kotlinClassPath
    main = 'abstractstate.StateOfAClassKt'
}

task StoringLambda(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StoringLambdaKt'
}

task StrTemplates(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StrTemplatesKt'
}

task StrangeQuote(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StrangeQuoteKt'
}

task StringBuilder(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringBuilderKt'
}

task StringConcatenation(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringConcatenationKt'
}

task StringHashCode(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringHashCodeKt'
}

task StringIndices(type: JavaExec) {
    classpath kotlinClassPath
    main = 'extensionproperties.StringIndicesKt'
}

task StringInvoke(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringInvokeKt'
}

task StringIsNullOr(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringIsNullOrKt'
}

task StringIteration(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringIterationKt'
}

task StringPlusNumber(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringPlusNumberKt'
}

task StringRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringRangeKt'
}

task StringTemplates(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringTemplatesKt'
}

task Strings(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringsKt'
}

task Suitcase(type: JavaExec) {
    classpath kotlinClassPath
    main = 'lateinitialization.SuitcaseKt'
}

task Sum(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SumKt'
}

task SumUsingRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SumUsingRangeKt'
}

task SumViaFold(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SumViaFoldKt'
}

task Swearing(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SwearingKt'
}

task TDDFail(type: JavaExec) {
    classpath kotlinClassPath
    main = 'testing1.TDDFailKt'
}

task TDDStillFails(type: JavaExec) {
    classpath kotlinClassPath
    main = 'testing2.TDDStillFailsKt'
}

task TDDWorks(type: JavaExec) {
    classpath kotlinClassPath
    main = 'testing3.TDDWorksKt'
}

task TailRecursiveSum(type: JavaExec) {
    classpath kotlinClassPath
    main = 'tailrecursion.TailRecursiveSumKt'
}

task TakeOrDrop(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TakeOrDropKt'
}

task Team(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TeamKt'
}

task TeamWithTraditions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TeamWithTraditionsKt'
}

task Temperature(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TemperatureKt'
}

task TerminalOperations(type: JavaExec) {
    classpath kotlinClassPath
    main = 'creatingsequences.TerminalOperationsKt'
}

task TestingExample(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TestingExampleKt'
}

task ThreeQuotes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ThreeQuotesKt'
}

task TicTacToe(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TicTacToeKt'
}

task ToDoubleException(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ToDoubleExceptionKt'
}

task ToIntException(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ToIntExceptionKt'
}

task Todo(type: JavaExec) {
    classpath kotlinClassPath
    main = 'nothingtype.TodoKt'
}

task TopLevelFunctionRef(type: JavaExec) {
    classpath kotlinClassPath
    main = 'memberreferences2.TopLevelFunctionRefKt'
}

task TransformingMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TransformingMapKt'
}

task TrimMargin(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TrimMarginKt'
}

task TrimmedMembers(type: JavaExec) {
    classpath kotlinClassPath
    main = 'upcasting.TrimmedMembersKt'
}

task TripleQuotes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TripleQuotesKt'
}

task TrueOrFalse(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TrueOrFalseKt'
}

task Truncation(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TruncationKt'
}

task TryFinally(type: JavaExec) {
    classpath kotlinClassPath
    main = 'exceptionhandling.TryFinallyKt'
}

task Tuple(type: JavaExec) {
    classpath kotlinClassPath
    main = 'destructuring.TupleKt'
}

task TwoArgLambda(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TwoArgLambdaKt'
}

task TwoFunctionsWithVarargs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TwoFunctionsWithVarargsKt'
}

task TypeDeclarations(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TypeDeclarationsKt'
}

task Types(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TypesKt'
}

task Underscore(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UnderscoreKt'
}

task Unexpected(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UnexpectedKt'
}

task UnitReturn(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UnitReturnKt'
}

task UnitReturnType(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UnitReturnTypeKt'
}

task UnpredictableHashing(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UnpredictableHashingKt'
}

task Unsafe(type: JavaExec) {
    classpath kotlinClassPath
    main = 'downcasting.UnsafeKt'
}

task Usable(type: JavaExec) {
    classpath kotlinClassPath
    main = 'resourcecleanup.UsableKt'
}

task UseALibrary(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UseALibraryKt'
}

task UseAtomicLog(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UseAtomicLogKt'
}

task UseBeanClass(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UseBeanClassKt'
}

task UseLines(type: JavaExec) {
    classpath kotlinClassPath
    main = 'resourcecleanup.UseLinesKt'
}

task UsingAtomicTest(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UsingAtomicTestKt'
}

task UsingDataClass(type: JavaExec) {
    classpath kotlinClassPath
    main = 'fromjava.UsingDataClass'
}

task UsingKotlinClass(type: JavaExec) {
    classpath kotlinClassPath
    main = 'fromjava.UsingKotlinClass'
}

task UsingLists(type: JavaExec) {
    classpath kotlinClassPath
    main = 'designingwithinheritance.UsingListsKt'
}

task UsingLongs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UsingLongsKt'
}

task UsingWith(type: JavaExec) {
    classpath kotlinClassPath
    main = 'withfunction.UsingWithKt'
}

task Vals(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ValsKt'
}

task ValueFromMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ValueFromMapKt'
}

task VarArgs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'VarArgsKt'
}

task VarargLikeList(type: JavaExec) {
    classpath kotlinClassPath
    main = 'VarargLikeListKt'
}

task VarargSum(type: JavaExec) {
    classpath kotlinClassPath
    main = 'VarargSumKt'
}

task VariableArgList(type: JavaExec) {
    classpath kotlinClassPath
    main = 'VariableArgListKt'
}

task Vars(type: JavaExec) {
    classpath kotlinClassPath
    main = 'VarsKt'
}

task VerySlowFibonacci(type: JavaExec) {
    classpath kotlinClassPath
    main = 'slowfibonacci.VerySlowFibonacciKt'
}

task VisibleArgs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'VisibleArgsKt'
}

task WhenAndHierarchy(type: JavaExec) {
    classpath kotlinClassPath
    main = 'downcasting.WhenAndHierarchyKt'
}

task WhenSubjectVariable(type: JavaExec) {
    classpath kotlinClassPath
    main = 'downcasting.WhenSubjectVariableKt'
}

task While(type: JavaExec) {
    classpath kotlinClassPath
    main = 'WhileKt'
}

task WhileControl(type: JavaExec) {
    classpath kotlinClassPath
    main = 'WhileControlKt'
}

task WhileLabeled(type: JavaExec) {
    classpath kotlinClassPath
    main = 'WhileLabeledKt'
}

task WhileLoop(type: JavaExec) {
    classpath kotlinClassPath
    main = 'WhileLoopKt'
}

task WhyFlatMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'manipulatinglists.WhyFlatMapKt'
}

task WildAnimals(type: JavaExec) {
    classpath kotlinClassPath
    main = 'WildAnimalsKt'
}

task WithCleanup(type: JavaExec) {
    classpath kotlinClassPath
    main = 'withfunction.WithCleanupKt'
}

task WithDefaultArguments(type: JavaExec) {
    classpath kotlinClassPath
    main = 'withdefaultarguments.WithDefaultArgumentsKt'
}

task WithPropertyAccessor(type: JavaExec) {
    classpath kotlinClassPath
    main = 'abstractclasses.WithPropertyAccessorKt'
}

task WithSecondary(type: JavaExec) {
    classpath kotlinClassPath
    main = 'secondaryconstructors.WithSecondaryKt'
}

task WithoutDefaultArguments(type: JavaExec) {
    classpath kotlinClassPath
    main = 'withoutdefaultarguments.WithoutDefaultArgumentsKt'
}

task XYZFlatMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'xyzflatmap.XYZFlatMapKt'
}

task XYZMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'xyzmap.XYZMapKt'
}

task ZeroArguments(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ZeroArgumentsKt'
}

task ZipAndTransform(type: JavaExec) {
    classpath kotlinClassPath
    main = 'manipulatinglists.ZipAndTransformKt'
}

task Zipper(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ZipperKt'
}

task ZippingWithNext(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ZippingWithNextKt'
}

task run (dependsOn: [
    'ASCIIMap',
    'AVarIsMutable',
    'AbsExercise1',
    'AbsExercise2',
    'AbsExercise3',
    'AddingIntToChar',
    'AllOperators',
    'Also',
    'Amphibian',
    'AnUnchangingVar',
    'AnalyzeInput',
    'Animals',
    'AnnotatedJava',
    'Any',
    'AnyFromListOfStar',
    'AnyInstead',
    'ApplyIfNotNull',
    'ApplyVsAlso',
    'Arg',
    'ArgumentOrder',
    'ArraySpread',
    'AssigningAnIf',
    'AssigningToVariable',
    'AssignmentOperators',
    'AssociateBy',
    'AssociateByUnique',
    'AssociateWith',
    'AtomicTestCapture',
    'AverageIncome',
    'AverageIncomeWithException',
    'AverageIncomeWithNull',
    'BCIExercise1',
    'BCIExercise2',
    'BCIExercise3',
    'BMIEnglish',
    'BMIMetric',
    'Backticks',
    'Basic',
    'BasicFunctions',
    'BasicGenerics',
    'BasicLambda',
    'BasicLogging',
    'Bear',
    'BetterSuitcase',
    'BigFibonacci',
    'BiggestLong',
    'BmiWhen',
    'BookExtensions',
    'Booleans',
    'Boxes',
    'BuildString',
    'BuildStringAndThis',
    'ByOperations',
    'CallStack',
    'CallTopLevelFunction',
    'CallTopLevelFunction2',
    'CarHolder',
    'Cat',
    'CatchChecked',
    'ChainedCalls',
    'ChangingAVal',
    'CharRange',
    'CheckObject',
    'CheckObject2',
    'CheckType',
    'CheckingArgument',
    'CheckingOptions',
    'ClassBodies',
    'Closeable',
    'Closed',
    'Closures',
    'Closures2',
    'Color2',
    'Color3',
    'ColorBlend',
    'ColorSet',
    'CompanionFactory',
    'CompanionObject',
    'CompareTo',
    'Computation',
    'Computer',
    'Confusing',
    'ConstructorReference',
    'ContactMap',
    'Conversion',
    'Cookie',
    'CopyDataClass',
    'Counter',
    'CreateString',
    'CreateString2',
    'CreatingLists',
    'Cup',
    'Cup2',
    'CustomLabel',
    'Data',
    'DataClassCopy',
    'DataClasses',
    'Declarations',
    'Default',
    'DefineTakeIf',
    'DefiningExceptions',
    'DefiningRanges',
    'Definition',
    'DelegatedControls',
    'Dereference',
    'DereferenceNull',
    'DestructuringData',
    'DestructuringDuo',
    'DestructuringMap',
    'Direction',
    'DisplayAlienSpecies',
    'DoWhile',
    'DoWhileControl',
    'DoWhileLoop',
    'Dog',
    'Drinks',
    'EagerEvaluation',
    'EagerVsLazyEvaluation',
    'EasyKeys',
    'ElvisCall',
    'ElvisOperator',
    'EmptyProgram',
    'EnumImport',
    'Evaluation',
    'EvaluationOrder',
    'Exercise1',
    'Exercise2',
    'Exercise3',
    'ExplicitCheck',
    'ExplicitDelegation',
    'ExplicitTyping',
    'ExploreMaze',
    'ExploreMaze2',
    'ExpressionInTemplate',
    'ExtensionsToJavaClass',
    'Factorial',
    'Fail',
    'FaultySuitcase',
    'Fibonacci',
    'FibonacciProperty',
    'Filter',
    'FilterEven',
    'FilterIsInstance',
    'FilterMap',
    'FilterNotNull',
    'Flatten',
    'FlattenAndFlatMap',
    'FloatingPointRange',
    'FoldAndReduce',
    'FoldRight',
    'FoldVsForLoop',
    'ForControl',
    'ForEachLine',
    'ForIsAStatement',
    'ForLabeled',
    'ForLoop',
    'ForWithCharRange',
    'ForWithRanges',
    'FullyQualify',
    'FunctionClosure',
    'FunctionReference',
    'GadgetExtensions',
    'GadgetMembers',
    'Game',
    'GameImpl',
    'GardenItem',
    'GenericFunction',
    'GenericHolder',
    'GenericListExt',
    'GenericListExtensions',
    'GenericSpeakers',
    'GermanOrdinals',
    'GetOrPut',
    'GetTrace',
    'GetValue',
    'GetterAndSetter',
    'GreatApe',
    'GreatApe2',
    'GreatApe3',
    'GreaterThan2',
    'GroupBy',
    'GroupByVsFilter',
    'GuaranteedCleanup',
    'Hamster',
    'Hamsters',
    'Handlers',
    'HasChar',
    'HashCodeFailure',
    'Hello',
    'HelloWorld',
    'HelperFunction',
    'HiddenArrayList',
    'Hierarchy',
    'Holder',
    'House',
    'HumanAlice',
    'If1',
    'If2',
    'If3',
    'If4',
    'If5',
    'If6',
    'IfExpression',
    'IfResult',
    'Implementations',
    'ImportClass',
    'ImportEverything',
    'ImportNameChange',
    'ImportPythagorean',
    'Improved',
    'InString',
    'IncrementOperator',
    'IndexIntoString',
    'InferInt',
    'Inference',
    'InfiniteRecursion',
    'InitSection',
    'InputLines1',
    'InputLines2',
    'IntDivisionTruncates',
    'IntRanges',
    'IntegerOverflow',
    'InterestingSessions',
    'InterfaceCollision',
    'IntroducingCapture',
    'IntroducingNull',
    'Invoke',
    'IterateOverString',
    'Iteration',
    'IterationVsMembership',
    'JavaChecked',
    'JavaList',
    'JetPack',
    'JoinToString',
    'KeyFailure',
    'KotlinChecked',
    'LabeledReturn',
    'LabeledThis',
    'LambdaAndNamedArgs',
    'LambdaIt',
    'LambdaTypeInference',
    'LazyInt',
    'LazySyntax',
    'Let',
    'Level',
    'LibraryException',
    'ListCollection',
    'ListIndicesMap',
    'ListInit',
    'ListOf',
    'ListOfStar',
    'ListOfStrings',
    'ListUsefulFunction',
    'Lists',
    'LocalExtensions',
    'LocalFile',
    'LocalFunctionReference',
    'LocalFunctions',
    'LogChanges',
    'LongConstants',
    'MainArgConversion',
    'MainArgs',
    'MakeSalad',
    'Mapping',
    'Maps',
    'MatchingAgainstVals',
    'MemberOperator',
    'MemberVsExtension',
    'Membership',
    'MembershipInRange',
    'MembershipUsingBounds',
    'MixColors',
    'ModelingMI',
    'Module2',
    'Modulus',
    'Molecule',
    'MultipleArgs',
    'MultipleListReferences',
    'MultipleListRefs',
    'MultipleRef',
    'MultiplyByFour',
    'MultiplyByThree',
    'MultiplyByTwo',
    'MutListIsList',
    'MutableBlendMap',
    'MutableBlendMap2',
    'MutableList',
    'MutableMaps',
    'MutableMaze',
    'MutableSet',
    'NPEOnPlatformType',
    'NamedArguments',
    'NamedCompanionObject',
    'NewAngle',
    'NewException',
    'NickName',
    'NoComputationYet',
    'NonNullAssert',
    'NonNullAssertCall',
    'NullInMaps',
    'NullableFunction',
    'NullableInMap',
    'NullableParameter',
    'NullableReceiver',
    'NullableReturn',
    'NullableTypes',
    'Num',
    'NumberConversions',
    'NumberSequence1',
    'NumberSequence2',
    'NumberTypes',
    'ObjectCounter',
    'ObjectFunctions',
    'ObjectInheritance',
    'ObjectKeyword',
    'ObjectNesting',
    'ObjectProperty',
    'ObserveAnimals',
    'OmittingParentheses',
    'OneOrTheOther',
    'OpOrder',
    'OpOrderParens',
    'Open1',
    'Open2',
    'OperationsOnSets',
    'OperatorPlus',
    'OtherConstructors',
    'OutOfBounds',
    'Overflow',
    'OverloadedVsDefaultArg',
    'Overloading',
    'OverloadingAdd',
    'PairDestructuring',
    'PairOfLists',
    'Pairs',
    'ParameterizedReturn',
    'ParameterizedTypes',
    'Partition',
    'Perform',
    'Pet',
    'Pets',
    'PlatformTypes',
    'Playing',
    'PolymorphicRobot',
    'Postconditions',
    'PostfixVsPrefix',
    'Predicates',
    'PropertyOptions',
    'PropertyReadWrite',
    'PropertyReference',
    'Quadratic',
    'QuadraticRequire',
    'Quote',
    'Quoting',
    'Random',
    'RangeOfInt',
    'RangeSum',
    'ReadOnlyAndPlus',
    'ReadOnlyBlendMap',
    'ReadOnlyBlendMap2',
    'ReadOnlyBlendMap3',
    'ReadOnlyCollections',
    'ReadOnlyMaps',
    'ReadingName',
    'ReadingNameWithIf',
    'ReadonlyVsMutableList',
    'RecursionLimits',
    'RecursiveEnumImport',
    'References',
    'RegularClasses',
    'RegularLambda',
    'RemoveDuplicates',
    'Repeat',
    'RepeatByInt',
    'RepeatFun',
    'RepeatThreeTimes',
    'RepeatVerbose',
    'Repetitive',
    'RequireNotNull',
    'ResultOfApply',
    'ResultOfWith',
    'ReturnFromFun',
    'ReturnInsideLambda',
    'RigidHolder',
    'Safe',
    'SafeCall',
    'SafeOperation',
    'SayHello',
    'Scientist',
    'SealedClasses',
    'Sets',
    'SimilarOperation',
    'Simple',
    'SimpleConstructor',
    'SimpleHashing',
    'SimpleLoggingStrategy',
    'SimpleOperation',
    'SingleArgRequire',
    'SmartCast',
    'SortWith',
    'Speakers',
    'SpreadOperator',
    'StateOfAClass',
    'StoringLambda',
    'StrTemplates',
    'StrangeQuote',
    'StringBuilder',
    'StringConcatenation',
    'StringHashCode',
    'StringIndices',
    'StringInvoke',
    'StringIsNullOr',
    'StringIteration',
    'StringPlusNumber',
    'StringRange',
    'StringTemplates',
    'Strings',
    'Suitcase',
    'Sum',
    'SumUsingRange',
    'SumViaFold',
    'Swearing',
    'TDDFail',
    'TDDStillFails',
    'TDDWorks',
    'TailRecursiveSum',
    'TakeOrDrop',
    'Team',
    'TeamWithTraditions',
    'Temperature',
    'TerminalOperations',
    'TestingExample',
    'ThreeQuotes',
    'TicTacToe',
    'ToDoubleException',
    'ToIntException',
    'Todo',
    'TopLevelFunctionRef',
    'TransformingMap',
    'TrimMargin',
    'TrimmedMembers',
    'TripleQuotes',
    'TrueOrFalse',
    'Truncation',
    'TryFinally',
    'Tuple',
    'TwoArgLambda',
    'TwoFunctionsWithVarargs',
    'TypeDeclarations',
    'Types',
    'Underscore',
    'Unexpected',
    'UnitReturn',
    'UnitReturnType',
    'UnpredictableHashing',
    'Unsafe',
    'Usable',
    'UseALibrary',
    'UseAtomicLog',
    'UseBeanClass',
    'UseLines',
    'UsingAtomicTest',
    'UsingDataClass',
    'UsingKotlinClass',
    'UsingLists',
    'UsingLongs',
    'UsingWith',
    'Vals',
    'ValueFromMap',
    'VarArgs',
    'VarargLikeList',
    'VarargSum',
    'VariableArgList',
    'Vars',
    'VerySlowFibonacci',
    'VisibleArgs',
    'WhenAndHierarchy',
    'WhenSubjectVariable',
    'While',
    'WhileControl',
    'WhileLabeled',
    'WhileLoop',
    'WhyFlatMap',
    'WildAnimals',
    'WithCleanup',
    'WithDefaultArguments',
    'WithPropertyAccessor',
    'WithSecondary',
    'WithoutDefaultArguments',
    'XYZFlatMap',
    'XYZMap',
    'ZeroArguments',
    'ZipAndTransform',
    'Zipper',
    'ZippingWithNext'
    ]) {
    doLast {
        println '*** run complete ***'
    }
}
